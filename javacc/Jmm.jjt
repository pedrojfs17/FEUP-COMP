options 
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Jmm)

import java.io.FileInputStream;
import java.util.HashMap;

public class Jmm{

    public static HashMap<String, Integer> var = new HashMap<String, Integer>();
    public static void main(String[] args) throws ParseException {
        System.out.println("Parser for a file.");
        System.out.println("Write a file name");
        try{

            Jmm parser = new Jmm(System.in);
            SimpleNode root = parser.Program();

            root.dump("");
            System.out.println("Parsed.");
        } catch (Exception e) {
            System.out.println("Couldn't parse file");
            e.printStackTrace();
        }

    }

}

PARSER_END(Jmm)

SKIP : 
{
    " " | "\t" | "\n" | "\r" | <"//"(~["\r","\n"])*> | <"/*">: MLCOMMENT
}

<MLCOMMENT> SKIP :
{
    <"*/"> : DEFAULT
    | <~[]>
}

TOKEN : 
{
    <INTEGERLITERAL : (["0" - "9"])+ >
    | <IMPORT: "import">
    | <CLASS: "class">
    | <PUBLIC: "public">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <EXTENDS: "extends">
    | <RETURN: "return">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <ELIF: <ELSE> <IF>>
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <SOUT: "System.out.println">
    | <TRUE: "true">
    | <FALSE: "false">
    | <THIS: "this">
    | <NEW: "new">
    | <LENGTH: "length">
    | <LBRACKET: "{">
    | <RBRACKET: "}">
    | <LPARENTHESES: "(">
    | <RPARENTHESES: ")">
    | <LSQUAREBRACKET: "[">
    | <RSQUAREBRACKET: "]">
    | <COLON: ",">
    | <SEMICOLON: ";">
    | <DOT: ".">
    | <MINUS: "-">
    | <ADD: "+">
    | <EQ : "=">
    | <MULT: "*">
    | <DIV: "/">
    | <LESS: "<">
    | <EXCLAMATION: "!">
    | <AND: "&&">
    | <IDENTIFIER: ["a"-"z","A"-"Z","_","$"](["a"-"z","A"-"Z","0"-"9","_","$"])*>
}

SimpleNode Program(): {}
{
    ImportDeclaration() ClassDeclaration() <EOF> { return jjtThis; }
}

void ImportDeclaration() #IMPORT: {}
{
    (<IMPORT> <IDENTIFIER> (<DOT> <IDENTIFIER> )* <SEMICOLON>)*
}

void ClassDeclaration() #CLASS_DECLARATION: {}
{
    <CLASS> <IDENTIFIER> [<EXTENDS> <IDENTIFIER> #EXTENDS(1)]
    <LBRACKET>
    (VarDeclaration())*
    (MethodDeclaration())*
    <RBRACKET>
}

void MethodDeclaration() #void: {}
{
    <PUBLIC> (MainDeclaration() | OtherMethodDeclaration())
}

void MainDeclaration() #MAIN: {}
{
    <STATIC> <VOID> <MAIN> <LPARENTHESES> <STRING> <LSQUAREBRACKET> <RSQUAREBRACKET> <IDENTIFIER> <RPARENTHESES> <LBRACKET>
    MethodBody()
    <RBRACKET>
}

void OtherMethodDeclaration() #METHOD: {}
{
    Type() <IDENTIFIER> <LPARENTHESES> [Type() <IDENTIFIER> (<COLON> Type() <IDENTIFIER> )*] <RPARENTHESES> <LBRACKET>
    MethodBody()
    <RETURN> ExpressionAnd() <SEMICOLON> <RBRACKET>
}

void MethodBody() #void: {Token t;}
{
    (LOOKAHEAD(2) VarDeclaration())*
    (Statement())*
}

void VarDeclaration() #VAR_DECLARATION: {Token t;}
{
    Type() t=<IDENTIFIER> #VAR <SEMICOLON>
}

void Type() #void: {Token t;}
{
     t=<INT> [<LSQUAREBRACKET> <RSQUAREBRACKET>#INTARRAY]
    | t=<BOOLEAN>#BOOLEAN
    | t=<IDENTIFIER>#IDENTIFIER
}

void Statement() #void: {Token t;}
{
    <LBRACKET> (Statement())* <RBRACKET> #BODY
    | ifStatement()
    | whileStatement()
    | ExpressionAnd() #STATEMENT [ <EQ> ExpressionAnd() #ASSIGNMENT] <SEMICOLON>
}

void ifStatement() #IFELSE: {Token t;}
{
    <IF> <LPARENTHESES> ExpressionAnd() <RPARENTHESES> Statement() <ELSE> Statement()
}

void whileStatement() #WHILE: {Token t;}
{
    try {
        <WHILE> <LPARENTHESES> ExpressionAnd() <RPARENTHESES>
    } catch (ParseException e) {
         error_skipto(LBRACKET);
    }

    try {
        Statement()
    } catch(ParseException e) {
         error_skipto(RBRACKET);
    }
}

// Operations

void ExpressionAnd() #void: {Token t;}
{
    ExpressionLess()
    (<AND> ExpressionLess() #AND(2))*

}

void ExpressionLess() #void: {Token t;}
{
    ExpressionAddSub()
    (<LESS> ExpressionAddSub() #LESS(2))*

}

void ExpressionAddSub() #void: {Token t;}
{
    ExpressionMultDiv()
    (   (<ADD>|<MINUS>) ExpressionMultDiv() #ADDSUB(2))*
}

void ExpressionMultDiv() #void: {Token t;}
{
    ExpressionArray()
    (  (<MULT>|<DIV>) ExpressionArray() #MULTDIV(2))*
}
void ExpressionArray() #void: {Token t;}
{
    ExpressionExc()
    [Array()]
}

void Array() #void: {Token t;}
{
    <LSQUAREBRACKET> ExpressionAnd() <RSQUAREBRACKET> #ARRAY(2)
}

void ExpressionExc() #void: {Token t;}
{
    ExpressionDot()
    | (<EXCLAMATION> ExpressionExc() #EXCLAMATION)
}

void ExpressionDot() #void: {Token t;}
{
    Expression()
   ( <DOT>
        ( <LENGTH> #LENGTH
          | MethodCall() #METHOD_CALL
        )
        #OBJECT_METHOD(2)
    )*
}

void MethodCall() #void: {Token t;}
{
    <IDENTIFIER> <LPARENTHESES> [Params()] <RPARENTHESES>
}

void Params() #void: {Token t;}
{
    ExpressionAnd() (<COLON> ExpressionAnd())*
}

void Expression() #void: {Token t;}
{
     <INTEGERLITERAL> #INT
    | <TRUE> #TRUE
    | <FALSE> #FALSE
    | <IDENTIFIER> #IDENTIFIER
    | <THIS> #THIS
    | <LPARENTHESES> ExpressionAnd() <RPARENTHESES> #PARENTHESES
    | <NEW> (t=<INT> <LSQUAREBRACKET> ExpressionAnd() <RSQUAREBRACKET> #INTARRAY | t=<IDENTIFIER>  <LPARENTHESES> <RPARENTHESES> #OBJECT)

}

JAVACODE
void error_skipto(int kind) {
  ParseException e = generateParseException();  // generate the exception object.
  System.out.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);
}
