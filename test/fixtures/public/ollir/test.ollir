QuickSort {
	.construct QuickSort().V {
		invokespecial(this, "<init>").V;
	}

	.method public static main(args.array.String).V {
		L.array.i32 :=.array.i32 new(array, 10.i32).array.i32;
		i.i32 :=.i32 0.i32;
		Loop0:
            t2.i32 :=.i32  arraylength(L.array.i32).i32;
            t3.bool :=.bool i.i32  <.bool t2.i32;
			if (t3.bool ==.bool t3.bool) goto Body0;
			goto EndLoop0;
		Body0:
			t5.i32 :=.i32  arraylength(L.array.i32).i32;
		    L[i.i32].i32 :=.i32 t5.i32 -.i32 i.i32;
			i.i32 :=.i32 i.i32 +.i32 1.i32;
			goto Loop0;
		EndLoop0:
		q.QuickSort :=.QuickSort new(QuickSort).QuickSort;
		invokespecial(q.QuickSort, "<init>").V;
invokevirtual(q.QuickSort, "quicksort", L.array.i32).bool;invokevirtual(q.QuickSort, "printL", L.array.i32).bool;		ret.V;
	}
	.method public printL(L.array.i32).bool{
		i.i32 :=.i32 0.i32;
		Loop1:
t8.i32 :=.i32  arraylength(L.array.i32).i32;t9.bool :=.bool i.i32  <.bool t8.i32;
			if (t9.bool ==.bool t9.bool) goto Body1;
			goto EndLoop1;
		Body1:
			t10.i32 :=.i32 $1.L[i.i32].i32;		invokestatic(io, "println", 		t10.i32).V;			i.i32 :=.i32 i.i32 +.i32 1.i32;
			goto Loop1;
		EndLoop1:
		ret.bool 1.bool;
	}

	.method public quicksort(L.array.i32).bool{
		t12.i32 :=.i32  arraylength(L.array.i32).i32;
		t13.i32 :=.i32 t12.i32 -.i32 1.i32;
		t14.bool :=.bool invokevirtual(this, "quicksort", $1.L.array.i32, 0.i32, t13.i32).bool;
		ret.bool t14.bool;
	}
	.method public quicksort(L.array.i32, lo.i32, hi.i32).bool{
    t15.bool :=.bool $1.lo.i32  <.bool $1.hi.i32;
    		if (t15.bool !.bool t15.bool) goto else2;
    			p.i32 :=.i32 invokevirtual(this, "partition", $1.L.array.i32, $1.lo.i32, $1.hi.i32).i32;
    			t16.i32 :=.i32 p.i32 -.i32 1.i32;

    invokevirtual(this, "quicksort", $1.L.array.i32, $1.lo.i32, t16.i32).bool;
    t17.i32 :=.i32 p.i32 +.i32 1.i32;
    invokevirtual(this, "quicksort", $1.L.array.i32, t17.i32, $1.hi.i32).bool;			goto endif2;
    		else2:
    		endif2:
    		ret.bool 1.bool;
    	}

	.method public partition(L.array.i32, lo.i32, hi.i32).i32{
		t18.i32 :=.i32 $1.L[$1.hi.i32].i32;

		i.i32 :=.i32 $1.lo.i32;
		j.i32 :=.i32 $1.lo.i32;
		Loop3:
            t19.bool :=.bool j.i32  <.bool $1.hi.i32;
			if (t19.bool ==.bool t19.bool) goto Body3;
			goto EndLoop3;
		Body3:
	        t21.bool :=.bool  $1.L[j.i32].i32  <.bool p.i32;
		if (t21.bool !.bool t21.bool) goto else4;
			t22.i32 :=.i32 $1.L[i.i32].i32;

			t23.i32 :=.i32 $1.L[j.i32].i32;

			$1.L[j.i32].i32 :=.i32 tmp.i32;
			i.i32 :=.i32 i.i32 +.i32 1.i32;
			goto endif4;
		else4:
		endif4:
			j.i32 :=.i32 j.i32 +.i32 1.i32;
			goto Loop3;
		EndLoop3:
		t25.i32 :=.i32 $1.L[i.i32].i32;

		t26.i32 :=.i32 $1.L[$1.hi.i32].i32;

		$1.L[$1.hi.i32].i32 :=.i32 tmp.i32;
		ret.i32 i.i32;
	}
}
