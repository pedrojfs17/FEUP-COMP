options 
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(Jmm)

import java.io.FileInputStream;
import java.util.HashMap;

public class Jmm{

    public static HashMap<String, Integer> var = new HashMap<String, Integer>();
    public static int par_count=0;
    public static void main(String[] args) throws ParseException {
        System.out.println("Parser for a file.");
        System.out.println("Write a file name");
        try{

            Jmm parser = new Jmm(System.in);
            SimpleNode root = parser.Program();

            root.dump("");
            System.out.println("Parsed.");
        } catch (Exception e) {
            System.out.println("Couldn't parse file");
            e.printStackTrace();
        }

    }

}



PARSER_END(Jmm)

SKIP : 
{
    " " | "\t" | "\n" | "\r" | <"//"(~["\r","\n"])*> | <"/*">: MLCOMMENT
}

<MLCOMMENT> SKIP :
{
    <"*/"> : DEFAULT
    | <~[]>
}

TOKEN : 
{
    <INTEGERLITERAL : (["0" - "9"])+ >
    | <IMPORT: "import">
    | <CLASS: "class">
    | <PUBLIC: "public">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <EXTENDS: "extends">
    | <RETURN: "return">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <ELIF: <ELSE> <IF>>
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <SOUT: "System.out.println">
    | <TRUE: "true">
    | <FALSE: "false">
    | <THIS: "this">
    | <NEW: "new">
    | <LENGTH: "length">
    | <LBRACKET: "{">
    | <RBRACKET: "}">
    | <LPARENTHESES: "(">
    | <RPARENTHESES: ")">
    | <LSQUAREBRACKET: "[">
    | <RSQUAREBRACKET: "]">
    | <COLON: ",">
    | <SEMICOLON: ";">
    | <DOT: ".">
    | <MINUS: "-">
    | <ADD: "+">
    | <EQ : "=">
    | <MULT: "*">
    | <DIV: "/">
    | <LESS: "<">
    | <EXCLAMATION: "!">
    | <AND: "&&">
    | <IDENTIFIER: ["a"-"z","A"-"Z","_","$"](["a"-"z","A"-"Z","0"-"9","_","$"])*>
}

SimpleNode Program(): {}
{
    ImportDeclaration() ClassDeclaration() <EOF> { return jjtThis; }
}

void ImportDeclaration() #IMPORT: {Token t,t1;}
{
    (<IMPORT> t=<IDENTIFIER> [SubImport() ] <SEMICOLON> {jjtThis.put("value",t.image);})*
}

void SubImport() #SUB_IMPORT: {Token t;}
{
    <DOT> t=<IDENTIFIER> {jjtThis.put("value",t.image);} [SubImport() ]
}

void ClassDeclaration() #CLASS_DECLARATION: {Token t,t1;}
{
    <CLASS> t=<IDENTIFIER> {jjtThis.put("value",t.image);} [<EXTENDS> t1=<IDENTIFIER> {jjtThis.put("value",t1.image);} #EXTENDS]
    <LBRACKET>
    (VarDeclaration())*
    (MethodDeclaration())*
    <RBRACKET>
}

void MethodDeclaration() #void: {}
{
    <PUBLIC> (MainDeclaration() | OtherMethodDeclaration())
}

void MainDeclaration() #MAIN: {}
{
    <STATIC> <VOID> <MAIN> <LPARENTHESES> <STRING> <LSQUAREBRACKET> <RSQUAREBRACKET> <IDENTIFIER> <RPARENTHESES> <LBRACKET>
    MethodBody()
    <RBRACKET>
}

void OtherMethodDeclaration() #METHOD_DECLARATION: {Token t;}
{
    Type() #METHOD_TYPE t=<IDENTIFIER> {jjtThis.put("value",t.image);}<LPARENTHESES> [ (ParameterDeclaration() (<COLON> ParameterDeclaration())*) #PARAMETERS ]  <RPARENTHESES> <LBRACKET>
    MethodBody()
    <RETURN> ExpressionAnd() <SEMICOLON> <RBRACKET> #RETURN(1)
}

void ParameterDeclaration() #PARAMETER: {Token t;}
{
    Type() t=<IDENTIFIER>{jjtThis.put("value",t.image);}
}

void MethodBody() #METHOD_BODY: {Token t;}
{
    (LOOKAHEAD(2) VarDeclaration())*
    (Statement())*
}

void VarDeclaration() #VAR_DECLARATION: {Token t;}
{
    Type() t=<IDENTIFIER>{jjtThis.put("value",t.image);} <SEMICOLON>
}

void Type() #void: {Token t;}
{
     t=<INT> #INT [<LSQUAREBRACKET> <RSQUAREBRACKET>#ARRAY]
    | t=<BOOLEAN>#BOOLEAN
    | t=<IDENTIFIER> {jjtThis.put("value",t.image);}#IDENTIFIER
}

void Statement() #void: {Token t;}
{
    <LBRACKET> (Statement())* <RBRACKET>
    | ifStatement()
    | whileStatement()
    | ExpressionAnd() [ <EQ> ExpressionAnd() #ASSIGNMENT(2)] <SEMICOLON>
}

void ifStatement() #void: {Token t;}
{
    <IF> <LPARENTHESES> ExpressionAnd() <RPARENTHESES> Statement() #IF(2)
    <ELSE> Statement() #ELSE
}

void whileStatement() #WHILE: {Token t;}
{
    try {
        <WHILE> <LPARENTHESES> {par_count++;} ExpressionAnd() <RPARENTHESES> {par_count--;}
    } catch (ParseException e) {
        boolean exception = true;
        while(par_count>0) {
             error_skipto(RPARENTHESES, exception);
             par_count--;
             exception = false;
        }
    }

    Statement()
}

// Operations

void ExpressionAnd() #void: {Token t;}
{
    ExpressionLess()
    (<AND> ExpressionLess() #AND(2))*

}

void ExpressionLess() #void: {Token t;}
{
    ExpressionAddSub()
    (<LESS> ExpressionAddSub() #LESS(2))*

}

void ExpressionAddSub() #void: {Token t;}
{
    ExpressionMultDiv()
    (   (t=<ADD>|t=<MINUS>) ExpressionMultDiv() {jjtThis.put("value",t.image);}#ADDSUB(2))*
}

void ExpressionMultDiv() #void: {Token t;}
{
    ExpressionArray()
    (  (t=<MULT>|t=<DIV>) ExpressionArray() {jjtThis.put("value",t.image);}#MULTDIV(2))*
}
void ExpressionArray() #void: {Token t;}
{
    ExpressionExc()
    [Array() #ARRAY(2)]
}

void Array() #void: {Token t;}
{
    <LSQUAREBRACKET> ExpressionAnd() <RSQUAREBRACKET>
}

void ExpressionExc() #void: {Token t;}
{
    ExpressionDot()
    | (<EXCLAMATION> ExpressionExc() #EXCLAMATION(1))
}

void ExpressionDot() #void: {Token t;}
{
    Expression()
   ( <DOT>
        ( <LENGTH> #LENGTH
          | MethodCall()
        )
        #OBJECT_METHOD(2)
    )*
}

void MethodCall() #METHOD_CALL: {Token t;}
{
    t=<IDENTIFIER>{jjtThis.put("value",t.image);} <LPARENTHESES> [Params()] <RPARENTHESES>
}

void Params() #PARAMS: {Token t;}
{
    ExpressionAnd() (<COLON> ExpressionAnd())*
}

void Expression() #void: {Token t;}
{
     t=<INTEGERLITERAL>{jjtThis.put("value",t.image);} #INT
    | <TRUE> #TRUE
    | <FALSE> #FALSE
    | t=<IDENTIFIER>{jjtThis.put("value",t.image);} #IDENTIFIER
    | <THIS> #THIS
    | <LPARENTHESES> {par_count++;} ExpressionAnd() <RPARENTHESES> {par_count--;}
    | <NEW> (t=<INT> Array()#ARRAY | t=<IDENTIFIER> <LPARENTHESES> <RPARENTHESES>{jjtThis.put("value",t.image);} #OBJECT) #NEW(1)

}

JAVACODE
void error_skipto(int kind, boolean exception) {
     if (exception) {
         ParseException e = generateParseException();  // generate the exception object.
         System.out.println(e.toString());  // print the error message
     }

      Token t;
      do {
            t = getNextToken();
      } while (t.kind != kind && t.kind!=0);
}
