options 
{
    LOOKAHEAD=1;
}

PARSER_BEGIN(JmmParser)

import java.io.FileInputStream;
import java.util.HashMap;

public class JmmParser {

    public static HashMap<String, Integer> var = new HashMap<String, Integer>();
    public static void main(String[] args) throws ParseException {
        System.out.println("Parser for a file.");
        System.out.println("Write a file name");
        try{
            FileInputStream file = new FileInputStream("test/public/java/HelloWorld");
            JmmParser parser = new JmmParser(file);
            SimpleNode root = parser.Program();

            root.dump("");
            System.out.println("Parsed.");
        } catch (Exception e) {
            System.out.println("Couldn't parse file");
            e.printStackTrace();
        }

    }

}

PARSER_END(JmmParser)

SKIP : 
{
    " " | "\t" | "\n" | "\r" | <"//"(~["\r","\n"])*> | <"/*">: MLCOMMENT
}

<MLCOMMENT> SKIP :
{
    <"*/"> : DEFAULT
    | <~[]>
}

TOKEN : 
{
    <INTEGERLITERAL : (["+","-"])?(["0" - "9"])+ >
    | <IMPORT: "import">
    | <CLASS: "class">
    | <PUBLIC: "public">
    | <STATIC: "static">
    | <VOID: "void">
    | <MAIN: "main">
    | <STRING: "String">
    | <EXTENDS: "extends">
    | <RETURN: "return">
    | <INT: "int">
    | <BOOLEAN: "boolean">
    | <ELIF: <ELSE> <IF>>
    | <IF: "if">
    | <ELSE: "else">
    | <WHILE: "while">
    | <SOUT: "System.out.println">
    | <TRUE: "true">
    | <FALSE: "false">
    | <THIS: "this">
    | <NEW: "new">
    | <LENGTH: "length">
    | <LBRACKET: "{">
    | <RBRACKET: "}">
    | <LPARENTHESES: "(">
    | <RPARENTHESES: ")">
    | <LSQUAREBRACKET: "[">
    | <RSQUAREBRACKET: "]">
    | <COLON: ",">
    | <SEMICOLON: ";">
    | <DOT: ".">
    | <MINUS: "-">
    | <ADD: "+">
    | <EQ : "=">
    | <MULT: "*">
    | <DIV: "/">
    | <LESS: "<">
    | <EXCLAMATION: "!">
    | <AND: "&&">
    | <IDENTIFIER: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*>
}

SimpleNode Program(): {}
{
    ImportDeclaration() ClassDeclaration() <EOF> { return jjtThis; }
}

void ImportDeclaration(): {}
{
    (<IMPORT> <IDENTIFIER> (<DOT> <IDENTIFIER> )* <SEMICOLON>)*
}

void ClassDeclaration(): {}
{
    <CLASS> <IDENTIFIER> [<EXTENDS> <IDENTIFIER>]
    <LBRACKET>
    (VarDeclaration())*
    (MethodDeclaration())*
    <RBRACKET>
}

void MethodDeclaration(): {}
{
    <PUBLIC> (MainDeclaration() | OtherMethodDeclaration())
}

void MainDeclaration(): {}
{
    <STATIC> <VOID> <MAIN> <LPARENTHESES> <STRING> <LSQUAREBRACKET> <RSQUAREBRACKET> <IDENTIFIER> <RPARENTHESES> <LBRACKET>
    MethodBody()
    <RBRACKET>
}

void OtherMethodDeclaration(): {}
{
    Type() <IDENTIFIER> <LPARENTHESES> [Type() <IDENTIFIER> (<COLON> Type() <IDENTIFIER> )*] <RPARENTHESES> <LBRACKET>
    MethodBody()
    <RETURN> ExpressionAnd() <SEMICOLON> <RBRACKET>
}

void MethodBody(): {Token t;}
{
    (LOOKAHEAD(2) VarDeclaration())*
    (Statement())*
}

void VarDeclaration(): {Token t;}
{
    Type() t=<IDENTIFIER>#IDENTIFIER <SEMICOLON>
}

void Type(): {Token t;}
{
     (t=<INT>#INT) (<LSQUAREBRACKET> <RSQUAREBRACKET>#ARRAY)?
    | t=<BOOLEAN>#BOOLEAN
    | t=<IDENTIFIER>#IDENTIFIER
}

void Statement(): {Token t;}
{
    <LBRACKET> (Statement())* <RBRACKET> #BODY
    | ifStatement() #IFELSE
    | whileStatement() #WHILE
    | ExpressionAnd() [StatementAssignment()] <SEMICOLON> #ASSIGNMENT
}

void ifStatement(): {Token t;}
{
    <IF> <LPARENTHESES> ExpressionAnd() <RPARENTHESES> Statement() <ELSE> Statement()
}

void whileStatement(): {Token t;}
{
    <WHILE> <LPARENTHESES> ExpressionAnd() <RPARENTHESES> Statement()
}

void StatementAssignment(): {Token t;}
{
     <EQ> ExpressionAnd()
     |  <LSQUAREBRACKET> ExpressionAnd() <RSQUAREBRACKET> <EQ> ExpressionAnd()
}

// Operations

void ExpressionAnd(): {Token t;}
{
    ExpressionLess()
    (<AND> ExpressionLess() #AND(2))*

}

void ExpressionLess(): {Token t;}
{
    ExpressionAddSub()
    (<LESS> ExpressionAddSub() #LESS(2))*

}

void ExpressionAddSub(): {Token t;}
{
    ExpressionMultDiv()
    (   (<ADD>|<MINUS>) ExpressionMultDiv() #ADDSUB(2))*
}

void ExpressionMultDiv(): {Token t;}
{
    ExpressionArray()
    (  (<MULT>|<DIV>) ExpressionArray() #MULTDIV(2))*
}
void ExpressionArray(): {Token t;}
{
    ExpressionExc()
    [<LSQUAREBRACKET> ExpressionAnd() <RSQUAREBRACKET> #ARRAY]
}


void ExpressionExc(): {Token t;}
{
    ExpressionDot()
    | <EXCLAMATION> ExpressionAnd() #EXCLAMATION
}

void ExpressionDot(): {Token t;}
{
    Expression()
   ( <DOT> #DOT(1)
        ( <LENGTH> #LENGTH
          | MethodCall() #FUNCTION
        )
    )*
}

void MethodCall(): {Token t;}
{
    <IDENTIFIER> <LPARENTHESES> (Params())? <RPARENTHESES>
}

void Params(): {Token t;}
{
    ExpressionAnd() (<COLON> ExpressionAnd())*
}

void Expression(): {Token t;}
{
     <INTEGERLITERAL> #INT
    | <TRUE> #TRUE
    | <FALSE> #FALSE
    | <IDENTIFIER> #IDENTIFIER
    | <THIS> #THIS
    | <LPARENTHESES> ExpressionAnd() <RPARENTHESES> #PARENTHESES
    | <NEW> (t=<INT> <LSQUAREBRACKET> ExpressionAnd() <RSQUAREBRACKET> #INTARRAY | (t=<IDENTIFIER> #IDENTIFIER <LPARENTHESES> <RPARENTHESES> ))

}



